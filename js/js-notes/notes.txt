javascript:
------------
A low-level language is a programming language that provides little or 
no abstraction of programming concepts and is very close to writing actual machine instructions

The main difference between high level language and low level language is that, 
-Programmers can easily understand or interpret or compile the high level language in comparison of machine. ...
-High level language is less memory efficient. Low level language is high memory efficient.

high-level means not to worry about memory management and other stuff like.

-->js is a high level,object oriented.
-->JavaScript is a scripting or programming language that allows you to implement complex features on web pages.

Uses:
-----
html - content of page.
css -  presentation.
js  -  inter acts with webpage making more dynamic rather than static.


ES6=ECMA Script

latest:ES11


variables:
----------
only use number, alphabets,_,$

primitive data-types:[7]
=======================
Number
Bool
String==>>'' or ""
Undefined ---means empty value || let job;
Null
Symbol(Es2015):-value is unique and cannot be changed.
BigInt(ES2020):-large integers that number cant hold.


!!!---javscript has dynamic typing.

delcare variables:
==================
let,var,const

1] let:- use let when it changes later(mutation)
			 let age=11
			 age=18

2] const: doesn't change and don't leave it empty also

3] var :-
			

operators: +.-,*,/,**(2 power 3==2**3)
==========
let x=10  x+=10 ans:x=20

assignment operator:  [x-=.x/=,x*=],x++,x--;
comparison operator : //,>,<,>=,<=
logic operator: && , || , !
ternary operator : ..?.. :
					ex: age=11
						age >=18 ? log('ur 18') : log('ur not 18')

Note:
----
!!-- templete string for large sentence for adjusting spaces ny using back 		  ticks ``.
ex:
	const name='puneeth'

	const sentences=`My name is ${name}`
	console.log(sentences)


\n-new line
	or
using `` using console.log(`....`)

coercion   ==   js converts the type
conversion == we do like mutation number(),string(),boolean()

note: 
-----

1] only + will concat str  
	ex:'1'+'1'=11
		'2'-'1'=1


2] 5 falsy values: 0,'',undefined,null,NaN

3] === :- doesn't support type coercion ex: '1'=== 1 = false ,1===1 = true

4] ==  :- support type coercion  ex: '1'== 1 = true

5] prompt() to take inputs from user

js as SWITCH:
=============
switch(){
	
	case '':
		break;

	default:

}

Note:
-----
->activate strict mode. secure ur code..
-> 'use strict';


function:
=========

syntax: function func_name(){
			...
			...
		}

2]anonymous function: 
 ex:
 		function(){
			...
			...
		}

3]arrow function:
ex: const age= age_no => 1997-age_no
	const latest_age=age(21)
	log(latest_age)

	a]multiple parameters:

			cont variable_name = (a,b)=>
			{
					....
					...
			}


Note: arrays and objects are the 2 data structure.

1] Arrays: 
   ======
		 can hold any type.
		 array is a single variable that is used to store different elements.
syntax:
		['','']
		   or
		= new Array('age',121,true);

access array: var_name[index_no];
------------ 

methods:
-------  
	var_name.method_name
			1]length
			2]push
			3]unshift(to add elements at beginning)
			4]pop
			5]shift(to remove first elements)
			6]indexOf(enter the value of the elemets and returns the      				index,no elements means -1)
			7]includes(return bool if the values are present in the given   	         array)


adding/replace into array:
-------------------------

var_name[index_no]=value;

Note:- can't replace entire array.
----



2]  objects: 
	=======

syntax: {
			key:value;
			.........
			........

		}


Access data using:
-----------------

	a] dot notation or []: 
	   ------------------

	   ->var_name.key
	   ->var_name['key']

methods: using this. will be pointing to var_name which is defined
-------


iteration: for,while
=========

using break,continue....

=============================================================================
				        DOM (Document Object Model)
=============================================================================
-> It defines the logical structure of documents and the way a document 	    is accessed and manipulated.

-> The DOM (Document Object Model) is an interface that represents how your  	HTML and XML documents are read by the browser. It allows a language 	   (JavaScript) to manipulate, structure, and style your website



how to access html elements using DOM:
-------------------------------------

1] document.querySelector('class-name/id-name');
   	-> gives the complete element like :
       	 <p class="demo">Welcome to DEMO</p>
   		
   		-> to access only text content is:
   			document.querySelector('class-name/id-name').textContent;

   			ex: Welcome to DEMO.
   		
   		-> to get value from the user entered,using dom:

   			    document.querySelector('class-name/id-name).value

2] handling Click Event-listener:
	-> document.querySelector('class-name/id-name').addEventListener('click',function(){....});

		syntax: addEventListener(type: DOMString, callback: EventListener, capture?: boolean)

		type:[click ...etc]

			- only querySelector need to use . or # to represent class/id

	-> document.querySelector('class-name/id-name').style.backgroundColor = 'green'
	
	-> select multiple query selector with same class name.
			document.querySelectorAll('class-name/id-name')

	-> to remove class:
			document.querySelectorAll('class-name/id-name').classList.remove('class-name','class-name')

			- for multiple classes to remove using ','(comma).
			- .class-name is not required ..just use class-name no need dot.

	-> to add class:
			document.querySelectorAll('class-name/id-name').classList.add('class-name','class-name')

	-> keypress from keyboard:
			document.addEventListener('keydown',function(){
						key was pressed.
		})

		- passing parameter to function in addEventListener list of object of that event
			using object.key 

		- how to check if class name exist or not:

		    document.querySelectorAll('class-name/id-name').classList.contains('class-name')

	-> other way of selecting id.

			document.getElementById('id-name')

	-> toggle():- same add/remove class

			-Toggle between adding and removing a class name from an element with JavaScript
			
			- checks class-name ...if it exists in the given element or not...then it adds the
			      class-name.

		document.querySelectorAll('class-name/id-name').classList.toggle('class-name')


js-working:
==========

- High-level
- Garbage-collected (cleaning un-used variable and so..)
- Interpreted or just-in-time compiled (line by line code to 0's and 1's)
- Multi-paradigm
- Prototype-based object-oriented
- First-class functions
- Dynamic
- Single-threaded
- Non-blocking event loop

js engine-executes js codes
mostly used engine: v8-engine (in chrome)

!!!-->>> diagram of js-engine refer " theory-lectures-v2.pdf "

js is both dynamic/statically typed language is known as JIT compilation.


scoping:
--------
  " 
   Scoping: How our program’s variables are organized and accessed. “Where do variables
   live?” or “Where can we access a certain variable, and where not?”;
  "

Scope:
-----
Space or environment in which a certain variable is declared (variable 
environment in case of functions). There is 
	->  global scope:
		-------------
			- Outside of any function or block
			- Variables declared in global
			- scope are accessible everywhere

	->  function scope: (local variables)
		---------------
			- Variables are accessible only
			- inside function, NOT outside
			- Also called local scope

	->  block scope:
		-----------
		- Variables are accessible only , inside block (block scoped) like(if,for with braces)
				HOWEVER, this only applies to ,let and const variables!.

		- Functions are also block scoped (only in strict mode)
		- using var makes variable to , access the variables inside the block, outside anywhere.
	let and const  are blocked scope.
	var is function-scope.Scope of a variable: Region of our code where a certain variable can be accessed


Array-Destructing : (spread-operator=unpack element to array)
==================

ex-1:
----
	const arr=[2,3,4]
	const [x,y,z] = arr
	console.log(x,y,z)
	
	o/p: x=2 y=3 z=4

ex-2 (nested-array):
--------------------
			const arr=[1,5,[99,88]]
			const [x,y,[a,b]]
			console.log(a,b)

			o/p: 99,88

ex-3 (setting default-value):
----------------------------
			const arr=[2,3]
	        const [x=1,y=1,z=1] = arr

	        o/p: 2,3,1
swapping:
--------
ex:
	const arr=[2,3,4]
	let [x,y] = arr
	[x,y]=[y,z]

Note: 
 -> To destructure objects we use {}-->refer this topic:[Data Structures, Modern Operators and  Strings]
 -> to unpack more parameters in function use:
 		const a =  function ({variable_name1,variable_name2....so on}) {
 					...
 				 }

mutation with objects:
----------------------

ex:
	let a=111
	let b=112

	const obj= {a:23,b:33};

	({a,b}=obj);
	console.log(a,b);
	
	o/p:23,33

-> Syntax for giving alternative names for objects :
    ----------------------------------------------
		ex:
		    const place={
		    			a:'bangalore'
		    			b:'mysore'
					};

			const  {a:'city_1',b:'city_2'} = place




1] spread-operator: 3-dot with variable_name (we expand)
   --------------

syntax: [...variable_name]


iterables: [arrays,str,maps,sets] not objects.


2] rest-pattern and parameters: (used for retrieve remaining elements in array ,we compress)
   ----------------------------

	syntax: [var-name,...others]
	ex:
		const aa=[1,2,3,...[33,22]]
		console.log(aa);

		const [a,b,...others]=aa

		console.log(a,b,others);

Note: 
     - rest-elements always should be at last in array.
	 - only one rest-elements shld be in array

 -> with objects:
	-------------
					ex:  const arr=['A',1,12]
					     {a,...numbers}=arr

					 o/p: 'A',1,12

-> using function:
   --------------
   				    ex:
   				    	//using rest-pattern pack them in n
						const add=function(...n){
						  console.log(n);
						}

						add(1)
						add(1,2)
						add(55,66,33,55,77,44,11)


						const x=[14,15,16,78]
						//using spread-operator does(1,2,23,..) equal to [...x], we unpack
						add(...x)


3] short Cricuiting using (&& ,||): true =1 ,false-0
   ------------------------------
   				ex1: " or return true value "
   					const a= 3 || 'apple'
   					o/p: 3

   					const b = '' || 'ball'
   					o/p: ball

   					const c = undefined || null ||'' || 'ball'
   					o/p: ball


   				ex2: "and return false value."

   					const d = 'apple' || 'ball' || 0 || 'aa'
   					o/p: 0




4] Nullish-operator: null and undefined(not 0 or '') (??)
   -----------------
   			ex: if b doesn't exist means the it would 10
   				const b = 0
   				const zero= b ?? 10
   				
   				o/p: 0





data-structure:
--------------

1] Set:
	ex: const orderSet =new Set([1,2,3,3,3,31])

		-> methods of set:

			orderSet.size
			orderSet.has(key-name) checks if the element contains in data or not
			orderSet.add()
			orderSet.delete()
			orderSet.clear()

		-> conversion to set to array:

			[..new Set([1,2,11])]

2] Maps:
		ex: const a = new Map()
			`create an empty Map`

			-> attributes of maps:
			   -------------------
				var-name.set() [expected k,v]
				ex: a.set('a','apple')

		    -> set inside set:
		        ex: var-name.set(1,'time').set('sat',12.00)

		     -> var-name.get() ,has(),size,

3] String:

		->	methods/function:
			----------------

							var-name.
									- indexof(),
									- lastIndexof(),
									- slice(begin,end),
									- toLowerCase()
									- trim()
									- replace()
									- includes()
									- startWith()
									- endsWith()
									- split() ==> returns array
									- .join(can be ',' ':')
									- padStart(length_of_string,'+ or any character/symbols')
									- padEnd()
									- repeat()

closure Function:
-----------------
 
 	- using call(), apply(),bind() method on objects
 	- so that this will pointing to current object 
 	- obj-name.call(va-name,arg1,arg2..)